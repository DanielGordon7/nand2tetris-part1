// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    // solution:
    //           - use one Mux16 for each of the 6 control bits
    //           - for the 'no' control bit, we output several busses of different widths to use to check if (out == 0) and if (out < 0)
    PARTS:
    // zx, nx
    Mux16 (a=x, b=false, sel=zx, out=zerox);
    Not16 (in=zerox, out=notx);
    Mux16 (a=zerox, b=notx, sel=nx, out=newx);

    // zy, ny
    Mux16 (a=y, b=false, sel=zy, out=zeroy);
    Not16 (in=zeroy, out=noty);
    Mux16 (a=zeroy, b=noty, sel=ny, out=newy);

    // f
    Add16 (a=newx, b=newy, out=xsumy);
    And16 (a=newx, b=newy, out=xandy);
    Mux16 (a=xandy, b=xsumy, sel=f, out=newf);

    // no
    Not16 (in=newf, out=notf);
    Mux16 (a=newf, b=notf, sel=no, out[0..7]=out07, out[8..15]=out815, out[15]=nglimit, out=out);

    // test if out==0. Do OR between all bits in output and negate, so if equals 0 return 1
    Or8Way (in=out07, out=or07);
    Or8Way (in=out815, out=or815);
    Or     (a=or07, b=or815, out=out16);
    Not    (in=out16, out=zr);

    // test if out < 0. If 15th bit is 1, then binary representation is >= 2^(n-1) so output number is negative
    Mux   (a=false, b=true, sel=nglimit, out=ng);
}