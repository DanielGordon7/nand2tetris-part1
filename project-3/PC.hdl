// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with increment, load, and reset modes.
 * if      (inc(t))   out(t+1) = out(t) + 1
 * else if (load(t))  out(t+1) = in(t)
 * else if (reset(t)) out(t+1) = 0
 * else               out(t+1) = out(t)
 *
 * To select a mode, assert the relevant control bit,
 * and de-assert the other two bits. 
 */
CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];
    
    // solution:
    // there is a hierarchy: 1. Reset
    //                       2. Load
    //                       3. Inc
    // if inc=load=reset=0, we get default value. Ttherefore, need to do 3 Mux in reverse order of hierarchy because next Mux can overwrite value of previous Mux
    // there is a feedback-loop as in Bit.hdl (1-bit register). Mux(Inc) ---> Mux(Load) ---> Mux(Reset) ---> Register ---> Mux(Inc) ---> ...
    
    PARTS:
    // We use only 1 register to keep track of counter value. Only in default case we use load=0, else load=1 to update counter. Create this load bit for the Register
    Or (a=inc, b=load, out=or1);
    Or (a=or1, b=reset, out=updateCtr);

    // Inc
    Inc16 (in=newCtr, out=incval);
    Mux16 (a=newCtr, b=incval, sel=inc, out=incout);
    // Load
    Mux16 (a=incout, b=in, sel=load, out=loadout);
    // Reset
    Mux16 (a=loadout, b=false, sel=reset, out=resetout);

    Register (in=resetout, load=updateCtr, out=newCtr, out=out);
}